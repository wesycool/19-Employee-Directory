{"version":3,"sources":["components/TableRow.js","components/Home.js","components/NavTabs.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","list","console","log","id","first_name","last_name","city","province","scope","Home","sortList","className","onClick","Object","entries","map","key","value","Number","NavTabs","props","location","useLocation","useState","employees","tableManager","setList","to","pathname","style","color","type","placeholder","aria-label","splitName","document","querySelector","trim","split","getFirstName","filter","toLowerCase","indexOf","getLastName","concatFirstLastName","item","pos","getFirstLastName","length","filterName","name","includes","splitLocation","getCity","getProvince","concatCityProvince","getCityProvince","filterLocation","filterNameLocation","filterLocationName","filterSearch","event","sort","a","b","condition","target","newArray","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51b85b03.chunk.js","sourcesContent":["import React from 'react'\n\nfunction TableRow( {list} ){\n\nconsole.log('TableRow',list)\n\nconst [id, {first_name,last_name,city,province}] = list\n\n    return (\n        <tr>\n            <th scope=\"row\">{id}</th>\n            <td>{first_name} {last_name}</td>\n            <td>{city}, {province}</td>\n        </tr>\n    )\n}\n\nexport default TableRow","import React from \"react\";\nimport TableRow from './TableRow'\n\n\nfunction Home( {list,sortList} ) {\n\n  return (\n    <div className=\"container\">\n        <table className=\"table table-hover\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\" id='last_name' onClick={sortList}>Name <i className=\"fas fa-sort-alpha-down\"></i></th>\n                    <th scope=\"col\" id='city' onClick={sortList}>Location <i className=\"fas fa-sort-alpha-down\"></i></th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.entries(list).map( ([key,value]) => <TableRow key={key} list={[Number(key)+1,value]} /> )}\n            </tbody>\n        </table>\n    </div>\n  );\n}\n\nexport default Home;","import React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport Home from './Home'\nimport employees from '../employees.json'\nimport './navtabs.css'\n\nfunction NavTabs(props) {\n  const location = useLocation();\n  const [ tableManager, setList ] = useState( employees )\n  console.log( `[App] tableManager:`, tableManager )\n\n  // onClick Button Function to Filter Employee List\n  function updateFilter(){\n    // Name Filter\n    const getName = document.querySelector('#name').value.trim()\n    const splitName = getName.split(/[\\s,]+/)\n\n\n    const getFirstName =  employees.filter( ({first_name}) => first_name.toLowerCase().indexOf( splitName[0].toLowerCase() )>-1 )\n    const getLastName =  employees.filter( ({last_name}) => last_name.toLowerCase().indexOf( splitName[0].toLowerCase() )>-1 )\n    const concatFirstLastName = [...getFirstName, ...getLastName].filter((item, pos) => [...getFirstName, ...getLastName].indexOf(item) === pos)\n    \n    const getFirstLastName = (splitName.length > 1)? employees.filter( ({last_name}) => last_name.toLowerCase().indexOf( splitName[1].toLowerCase() )>-1 ) : concatFirstLastName\n    const filterName = concatFirstLastName.filter( name => getFirstLastName.includes(name))\n\n    // Location Filter\n    const getLocation = document.querySelector('#location').value.trim()\n    const splitLocation = getLocation.split(/[\\s,]+/)\n\n    const getCity =  employees.filter( ({city}) => city.toLowerCase().indexOf( splitLocation[0].toLowerCase() )>-1 )\n    const getProvince =  employees.filter( ({province}) => province.toLowerCase().indexOf( splitLocation[0].toLowerCase() )>-1 )\n    const concatCityProvince = [...getCity, ...getProvince].filter((item, pos) => [...getCity, ...getProvince].indexOf(item) === pos)\n\n    const getCityProvince = (splitLocation.length > 1)? employees.filter( ({province}) => province.toLowerCase().indexOf( splitLocation[1].toLowerCase() )>-1 ) : concatCityProvince\n    const filterLocation = concatCityProvince.filter( location => getCityProvince.includes(location))\n    \n\n    // Search Filter on Both Name and Location Combination\n    const filterNameLocation = filterName.filter( list => filterLocation.includes(list) )\n    const filterLocationName = filterLocation.filter( list => filterName.includes(list) )\n    const filterSearch = [...filterNameLocation, ...filterLocationName].filter((item, pos) => [...filterNameLocation, ...filterLocationName].indexOf(item) === pos)\n\n    setList(filterSearch)\n  }\n\n  // Sort List\n  function sortList(event){\n    const sortList = tableManager.sort( (a,b) => {\n        const condition = a[event.target.id] > b[event.target.id]\n        return (condition - !condition)\n    } )\n\n    const newArray = [...sortList]\n    setList(newArray)\n  }\n\n  return (\n    <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-warning\">\n            <Link to=\"/\" className={location.pathname === \"/\" ? \"nav-link active\" : \"nav-link\"}>\n                <h2 style={{color:'black'}}><i className=\"far fa-address-book\"></i> Employee Directory</h2>\n            </Link>\n            <div className=\"navbar-collapse justify-content-end\">\n                <form className=\"form-inline\">\n                    <input className=\"form-control mr-sm-2 col-form-label-lg\" type=\"search\" placeholder=\"e.g. John Smith\" aria-label=\"name\" id=\"name\"/>\n                    <input className=\"form-control mr-sm-2 col-form-label-lg\" type=\"search\" placeholder=\"e.g. Toronto, Ontario\" aria-label=\"location\" id=\"location\"/>\n                    <button className=\"btn btn-secondary my-2 my-sm-0 btn-lg\" type=\"button\" onClick={updateFilter}><i className=\"fas fa-search\"></i> <span id=\"searchBtn\">Search</span></button>\n                </form>\n            </div>\n        </nav>\n\n        <Home list={tableManager} sortList={sortList}></Home>\n\n    </div>\n\n  );\n}\n\nexport default NavTabs;\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport NavTabs from './components/NavTabs';\n// import Home from './components/Home'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavTabs></NavTabs>\n        {/* <Route exact path=\"/\" component={Home} /> - didn't do what I wanted */}\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}